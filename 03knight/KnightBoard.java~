public class KnightBoard(){
    private int[][] board;
    public KnightBoard(int y, int x){
	board = new int[y][x];
    }
    public toString(){
	for (int[] y : board){
	    for (int x: y){
		if (x < 10 && x > 0){System.out.print(" ");}
		System.out.print(" ");
		System.out.print(x);
	    }
	    System.out.print("\n");
	}
    }
    public void solve(){
	for (int j = 0; j < 1+board.length/2; j++){
	    for (int i = 0; i < 1+board[0].length/2; i++){
		cool(j, i, 1);
	    }
	} 
	cool(board.length, board[0].length, 2);
    }
    
    private boolean cool(int y, int x, int level){

	//first, place the shit
	board[y][x] = level;
	if (level == board.length*board[0].length){
	    return true;
	}

        int[][] spots = {{y+1,x+2},{y+2,x+1},{y-1,x+2},{y-2,x+1},{y-1,x+2},{y-2,x+1},{y+1,x-2},{y+2,x-1}};
	for (int i = 0; i < 8){
	    //for each spot if spot is 0 and spot is on board, cool at that spot
	    //if cool at that spot returns true, return true (stop everything)
	    if ((board[spots[i][0]][spots[i][1]] == 0) &&
		(spots[i][0] < board.length) && (spots[i][0] > 0) && 
		(spots[i][1] < board[0].length) && (spots[i][1] > 0)){
		if (cool(spots[i][0], spots[i][1], level+1)){
		    return true;
		}
	    }
	}

	//remove the shit
	board[y][x] = 0;
    }
}
